package org.synth.intercept;

import org.objectweb.asm.Opcodes;

/**
 * A simple class to translate the integer version of an opcode into its friendly String name.
 */
public class OpcodeDebug
{
    public static final String toString(final int opcode)
    {
        if (opcode == Opcodes.NOP) return "NOP";
        if (opcode == Opcodes.ACONST_NULL) return "ACONST_NULL";
        if (opcode == Opcodes.ICONST_M1) return "ICONST_M1";
        if (opcode == Opcodes.ICONST_0) return "ICONST_0";
        if (opcode == Opcodes.ICONST_1) return "ICONST_1";
        if (opcode == Opcodes.ICONST_2) return "ICONST_2";
        if (opcode == Opcodes.ICONST_3) return "ICONST_3";
        if (opcode == Opcodes.ICONST_4) return "ICONST_4";
        if (opcode == Opcodes.ICONST_5) return "ICONST_5";
        if (opcode == Opcodes.LCONST_0) return "LCONST_0";
        if (opcode == Opcodes.LCONST_1) return "LCONST_1";
        if (opcode == Opcodes.FCONST_0) return "FCONST_0";
        if (opcode == Opcodes.FCONST_1) return "FCONST_1";
        if (opcode == Opcodes.FCONST_2) return "FCONST_2";
        if (opcode == Opcodes.DCONST_0) return "DCONST_0";
        if (opcode == Opcodes.DCONST_1) return "DCONST_1";
        if (opcode == Opcodes.BIPUSH) return "BIPUSH";
        if (opcode == Opcodes.SIPUSH) return "SIPUSH";
        if (opcode == Opcodes.LDC) return "LDC";
        if (opcode == Opcodes.ILOAD) return "ILOAD";
        if (opcode == Opcodes.LLOAD) return "LLOAD";
        if (opcode == Opcodes.FLOAD) return "FLOAD";
        if (opcode == Opcodes.DLOAD) return "DLOAD";
        if (opcode == Opcodes.ALOAD) return "ALOAD";
        if (opcode == Opcodes.IALOAD) return "IALOAD";
        if (opcode == Opcodes.LALOAD) return "LALOAD";
        if (opcode == Opcodes.FALOAD) return "FALOAD";
        if (opcode == Opcodes.DALOAD) return "DALOAD";
        if (opcode == Opcodes.AALOAD) return "AALOAD";
        if (opcode == Opcodes.BALOAD) return "BALOAD";
        if (opcode == Opcodes.CALOAD) return "CALOAD";
        if (opcode == Opcodes.SALOAD) return "SALOAD";
        if (opcode == Opcodes.ISTORE) return "ISTORE";
        if (opcode == Opcodes.LSTORE) return "LSTORE";
        if (opcode == Opcodes.FSTORE) return "FSTORE";
        if (opcode == Opcodes.DSTORE) return "DSTORE";
        if (opcode == Opcodes.ASTORE) return "ASTORE";
        if (opcode == Opcodes.IASTORE) return "IASTORE";
        if (opcode == Opcodes.LASTORE) return "LASTORE";
        if (opcode == Opcodes.FASTORE) return "FASTORE";
        if (opcode == Opcodes.DASTORE) return "DASTORE";
        if (opcode == Opcodes.AASTORE) return "AASTORE";
        if (opcode == Opcodes.BASTORE) return "BASTORE";
        if (opcode == Opcodes.CASTORE) return "CASTORE";
        if (opcode == Opcodes.SASTORE) return "SASTORE";
        if (opcode == Opcodes.POP) return "POP";
        if (opcode == Opcodes.POP2) return "POP2";
        if (opcode == Opcodes.DUP) return "DUP";
        if (opcode == Opcodes.DUP_X1) return "DUP_X1";
        if (opcode == Opcodes.DUP_X2) return "DUP_X2";
        if (opcode == Opcodes.DUP2) return "DUP2";
        if (opcode == Opcodes.DUP2_X1) return "DUP2_X1";
        if (opcode == Opcodes.DUP2_X2) return "DUP2_X2";
        if (opcode == Opcodes.SWAP) return "SWAP";
        if (opcode == Opcodes.IADD) return "IADD";
        if (opcode == Opcodes.LADD) return "LADD";
        if (opcode == Opcodes.FADD) return "FADD";
        if (opcode == Opcodes.DADD) return "DADD";
        if (opcode == Opcodes.ISUB) return "ISUB";
        if (opcode == Opcodes.LSUB) return "LSUB";
        if (opcode == Opcodes.FSUB) return "FSUB";
        if (opcode == Opcodes.DSUB) return "DSUB";
        if (opcode == Opcodes.IMUL) return "IMUL";
        if (opcode == Opcodes.LMUL) return "LMUL";
        if (opcode == Opcodes.FMUL) return "FMUL";
        if (opcode == Opcodes.DMUL) return "DMUL";
        if (opcode == Opcodes.IDIV) return "IDIV";
        if (opcode == Opcodes.LDIV) return "LDIV";
        if (opcode == Opcodes.FDIV) return "FDIV";
        if (opcode == Opcodes.DDIV) return "DDIV";
        if (opcode == Opcodes.IREM) return "IREM";
        if (opcode == Opcodes.LREM) return "LREM";
        if (opcode == Opcodes.FREM) return "FREM";
        if (opcode == Opcodes.DREM) return "DREM";
        if (opcode == Opcodes.INEG) return "INEG";
        if (opcode == Opcodes.LNEG) return "LNEG";
        if (opcode == Opcodes.FNEG) return "FNEG";
        if (opcode == Opcodes.DNEG) return "DNEG";
        if (opcode == Opcodes.ISHL) return "ISHL";
        if (opcode == Opcodes.LSHL) return "LSHL";
        if (opcode == Opcodes.ISHR) return "ISHR";
        if (opcode == Opcodes.LSHR) return "LSHR";
        if (opcode == Opcodes.IUSHR) return "IUSHR";
        if (opcode == Opcodes.LUSHR) return "LUSHR";
        if (opcode == Opcodes.IAND) return "IAND";
        if (opcode == Opcodes.LAND) return "LAND";
        if (opcode == Opcodes.IOR) return "IOR";
        if (opcode == Opcodes.LOR) return "LOR";
        if (opcode == Opcodes.IXOR) return "IXOR";
        if (opcode == Opcodes.LXOR) return "LXOR";
        if (opcode == Opcodes.IINC) return "IINC";
        if (opcode == Opcodes.I2L) return "I2L";
        if (opcode == Opcodes.I2F) return "I2F";
        if (opcode == Opcodes.I2D) return "I2D";
        if (opcode == Opcodes.L2I) return "L2I";
        if (opcode == Opcodes.L2F) return "L2F";
        if (opcode == Opcodes.L2D) return "L2D";
        if (opcode == Opcodes.F2I) return "F2I";
        if (opcode == Opcodes.F2L) return "F2L";
        if (opcode == Opcodes.F2D) return "F2D";
        if (opcode == Opcodes.D2I) return "D2I";
        if (opcode == Opcodes.D2L) return "D2L";
        if (opcode == Opcodes.D2F) return "D2F";
        if (opcode == Opcodes.I2B) return "I2B";
        if (opcode == Opcodes.I2C) return "I2C";
        if (opcode == Opcodes.I2S) return "I2S";
        if (opcode == Opcodes.LCMP) return "LCMP";
        if (opcode == Opcodes.FCMPL) return "FCMPL";
        if (opcode == Opcodes.FCMPG) return "FCMPG";
        if (opcode == Opcodes.DCMPL) return "DCMPL";
        if (opcode == Opcodes.DCMPG) return "DCMPG";
        if (opcode == Opcodes.IFEQ) return "IFEQ";
        if (opcode == Opcodes.IFNE) return "IFNE";
        if (opcode == Opcodes.IFLT) return "IFLT";
        if (opcode == Opcodes.IFGE) return "IFGE";
        if (opcode == Opcodes.IFGT) return "IFGT";
        if (opcode == Opcodes.IFLE) return "IFLE";
        if (opcode == Opcodes.IF_ICMPEQ) return "IF_ICMPEQ";
        if (opcode == Opcodes.IF_ICMPNE) return "IF_ICMPNE";
        if (opcode == Opcodes.IF_ICMPLT) return "IF_ICMPLT";
        if (opcode == Opcodes.IF_ICMPGE) return "IF_ICMPGE";
        if (opcode == Opcodes.IF_ICMPGT) return "IF_ICMPGT";
        if (opcode == Opcodes.IF_ICMPLE) return "IF_ICMPLE";
        if (opcode == Opcodes.IF_ACMPEQ) return "IF_ACMPEQ";
        if (opcode == Opcodes.IF_ACMPNE) return "IF_ACMPNE";
        if (opcode == Opcodes.GOTO) return "GOTO";
        if (opcode == Opcodes.JSR) return "JSR";
        if (opcode == Opcodes.RET) return "RET";
        if (opcode == Opcodes.TABLESWITCH) return "TABLESWITCH";
        if (opcode == Opcodes.LOOKUPSWITCH) return "LOOKUPSWITCH";
        if (opcode == Opcodes.IRETURN) return "IRETURN";
        if (opcode == Opcodes.LRETURN) return "LRETURN";
        if (opcode == Opcodes.FRETURN) return "FRETURN";
        if (opcode == Opcodes.DRETURN) return "DRETURN";
        if (opcode == Opcodes.ARETURN) return "ARETURN";
        if (opcode == Opcodes.RETURN) return "RETURN";
        if (opcode == Opcodes.GETSTATIC) return "GETSTATIC";
        if (opcode == Opcodes.PUTSTATIC) return "PUTSTATIC";
        if (opcode == Opcodes.GETFIELD) return "GETFIELD";
        if (opcode == Opcodes.PUTFIELD) return "PUTFIELD";
        if (opcode == Opcodes.INVOKEVIRTUAL) return "INVOKEVIRTUAL";
        if (opcode == Opcodes.INVOKESPECIAL) return "INVOKESPECIAL";
        if (opcode == Opcodes.INVOKESTATIC) return "INVOKESTATIC";
        if (opcode == Opcodes.INVOKEINTERFACE) return "INVOKEINTERFACE";
        if (opcode == Opcodes.NEW) return "NEW";
        if (opcode == Opcodes.NEWARRAY) return "NEWARRAY";
        if (opcode == Opcodes.ANEWARRAY) return "ANEWARRAY";
        if (opcode == Opcodes.ARRAYLENGTH) return "ARRAYLENGTH";
        if (opcode == Opcodes.ATHROW) return "ATHROW";
        if (opcode == Opcodes.CHECKCAST) return "CHECKCAST";
        if (opcode == Opcodes.INSTANCEOF) return "INSTANCEOF";
        if (opcode == Opcodes.MONITORENTER) return "MONITORENTER";
        if (opcode == Opcodes.MONITOREXIT) return "MONITOREXIT";
        if (opcode == Opcodes.MULTIANEWARRAY) return "MULTIANEWARRAY";
        if (opcode == Opcodes.IFNULL) return "IFNULL";
        if (opcode == Opcodes.IFNONNULL) return "IFNONNULL";
        throw new IllegalArgumentException("Unrecognized opcode: " + opcode);
    }
}