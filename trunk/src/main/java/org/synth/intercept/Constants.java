package org.synth.intercept;

import org.objectweb.asm.Type;

/**
 * A class to hold static constants shared by the various bytecode manipulation classes.
 */
public class Constants
{
    /**
     * The prefix added to native methods when they are wrapped.
     */
    public static final String NATIVE_METHOD_PREFIX = "wrapped_$$_";

    // Cached Type object for various classes used in bytecode generation.

    /**
     * Type for the {@link Class} class.
     */
    public static final Type CLASS_TYPE = Type.getType(Class.class);

    /**
     * Type for the {@link Throwable} class.
     */
    public static final Type THROWABLE_TYPE = Type.getType(Throwable.class);

    /**
     * Type for the {@link RuntimeException} class.
     */
    public static final Type RUNTIME_EXCEPTION_TYPE = Type.getType(RuntimeException.class);

    /**
     * Type for the {@link IllegalStateException} class.
     */
    public static final Type ILLEGAL_STATE_EXCEPTION_TYPE = Type.getType(IllegalStateException.class);

    /**
     * Type for the {@link NativeInvocationHandler} used to callback from generated bytecode to Java.
     */
    public static final Type HANDLER_TYPE = Type.getType(NativeInvocationHandler.class);

    // Type and descriptor constants to reference the annotations added by bytecode generators

    /**
     * Descriptor for the {@link HasInterceptedNatives} annotation.
     */
    public static final String HAS_INTERCEPTED_NATIVES_DESCRIPTOR = Type.getDescriptor(HasInterceptedNatives.class);

    /**
     * Type for the {@link HasInterceptedNatives} annotation.
     */
    public static final Type HAS_INTERCEPTED_NATIVES_TYPE = Type.getType(HasInterceptedNatives.class);

    /**
     * Descriptor for the {@link HasNatives} annotation.
     */
    public static final String HAS_NATIVES_DESCRIPTOR = Type.getDescriptor(HasNatives.class);

    /**
     * Type for the {@link HasNatives} annotation.
     */
    public static final Type HAS_NATIVES_TYPE = Type.getType(HasNatives.class);

    /**
     * Descriptor for the {@link Intercepted} annotation.
     */
    public static final String INTERCEPTED_DESCRIPTOR = Type.getDescriptor(Intercepted.class);

    /**
     * Type for the {@link Intercepted} annotation.
     */
    public static final Type INTERCEPTED_TYPE = Type.getType(Intercepted.class);

    /**
     * Descriptor for the {@link WasNative} annotation.
     */
    public static final String WAS_NATIVE_DESCRIPTOR = Type.getDescriptor(WasNative.class);

    /**
     * Type for the {@link WasNative} annotation.
     */
    public static final Type WAS_NATIVE_TYPE = Type.getType(WasNative.class);

    /**
     * An array of Type references for the wrapper types of the Java primitives keyed by the
     * {@link Type#getSort()}.
     */
    public static final Type[] WRAPPER_TYPES = new Type[11];
    static
    {
        Constants.WRAPPER_TYPES[Type.BOOLEAN] = Type.getType(Boolean.class);
        Constants.WRAPPER_TYPES[Type.BYTE] = Type.getType(Byte.class);
        Constants.WRAPPER_TYPES[Type.CHAR] = Type.getType(Character.class);
        Constants.WRAPPER_TYPES[Type.DOUBLE] = Type.getType(Double.class);
        Constants.WRAPPER_TYPES[Type.FLOAT] = Type.getType(Float.class);
        Constants.WRAPPER_TYPES[Type.INT] = Type.getType(Integer.class);
        Constants.WRAPPER_TYPES[Type.LONG] = Type.getType(Long.class);
        Constants.WRAPPER_TYPES[Type.SHORT] = Type.getType(Short.class);
        Constants.WRAPPER_TYPES[Type.VOID] = Type.getType(Void.class);
    }

}